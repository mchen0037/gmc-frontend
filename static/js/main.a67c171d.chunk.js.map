{"version":3,"sources":["components/login.jsx","components/DropdownMenu.jsx","components/TrainingSelection.jsx","components/isTrainedPage.jsx","components/Form.jsx","components/Results.jsx","components/TestingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","this","props","user","display_name","className","onClick","handleLogin","Component","DropdownMenu","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","status","name","setState","handleClick","_this2","DropdownButton","title","id","playlists","map","playlist","MenuItem","key","chosePlaylist","TrainingSelection","good","bad","handleClickGood","bind","assertThisInitialized","handleClickBad","submitTrainingSelection","playlist_name","good_playlist","filter","bad_playlist","fetch","headers","Authorization","token","good_playlist_response","json","good_playlist_json","good_track_ids","items","item","track","bad_playlist_response","bad_playlist_json","bad_track_ids","toString","good_audio_features_response","good_audio_features","bad_audio_features_response","bad_audio_features","axios","post","BACKEND_SERVER","audio_features","then","res","trained","console","log","components_DropdownMenu","Button","bsStyle","TrainedPage","models","bsClass","nowTesting","handleDelete","Form","value","handleChange","handleButtonClick","e","target","addSongs","FormGroup","controlId","ControlLabel","FormControl","type","placeholder","onChange","Feedback","HelpBlock","TestingPage","Table","songs","song","result","handleDeleteSong","addSongToList","removeSong","testSongs","uri","push","song_key","c","ids","substring","test_features_response","test_features","names_response","names_json","names","tracks","counter","test","data","results","_this3","stopTesting","components_Form","Results","App","testing","loginToSpotify","nowTrained","deleteModel","startTesting","window","location","OAUTH_SERVER","get","parsed","queryString","parse","search","accessToken","access_token","response","getPlaylists_response","getPlaylists_json","arrOfPlaylists","components_TestingPage","isTrainedPage","components_TrainingSelection","login","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sNA4BeA,0LAjBX,OACEC,EAAAC,EAAAC,cAAA,WACGC,KAAKC,MAAMC,KAAKC,aACfN,EAAAC,EAAAC,cAAA,WAAMC,KAAKC,MAAMC,KAAKC,aAAtB,kBACAN,EAAAC,EAAAC,cAAA,8BAEFF,EAAAC,EAAAC,cAAA,UACEK,UAAU,6BACVC,QAASL,KAAKC,MAAMK,aAFtB,gCAfYC,gCCoCLC,cAjCb,SAAAA,EAAYP,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,KAAMC,KACDc,MAAQ,CACXC,OAAQ,qBAHOP,6EAOLQ,GACZjB,KAAKkB,SAAS,CAACF,OAAQC,IACvBjB,KAAKC,MAAMkB,YAAYF,oCAGhB,IAAAG,EAAApB,KACP,OACEH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKK,UAAU,YACbP,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAAgBC,MAAOtB,KAAKe,MAAMC,OAChCO,GAAG,sBACHnB,UAAU,8BACTJ,KAAKC,MAAMuB,UAAUC,IAAI,SAAAC,GAAQ,OAChC7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CACEC,IAAKF,EAASH,GACdlB,QAAS,kBAAMe,EAAKS,cAAcH,EAAST,QAC1CS,EAAST,kBAzBCV,sCCkIZuB,cA5Hb,SAAAA,EAAY7B,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAA8B,IACjBrB,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAoB,GAAAhB,KAAAd,KAAMC,KACDc,MAAQ,CACXgB,KAAM,GAENC,IAAK,IAEPvB,EAAKwB,gBAAkBxB,EAAKwB,gBAAgBC,KAArBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAEvBA,EAAK2B,eAAiB3B,EAAK2B,eAAeF,KAApBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACtBA,EAAK4B,wBAA0B5B,EAAK4B,wBAAwBH,KAA7BxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAVdA,+EAeH6B,GACdtC,KAAKkB,SAAU,CAACa,KAAMO,2CAKTA,GACbtC,KAAKkB,SAAU,CAACc,IAAKM,wMAMjBC,EAAgBvC,KAAKC,MAAMuB,UAAUgB,OAAO,SAAAd,GAAQ,OAAIA,EAAST,OAASG,EAAKL,MAAMgB,OACrFU,EAAezC,KAAKC,MAAMuB,UAAUgB,OAAO,SAAAd,GAAQ,OAAIA,EAAST,OAASG,EAAKL,MAAMiB,eAItFU,MAAM,wCACNH,EAAc,GAAGhB,GAAK,UACtB,CAACoB,QAAS,CAACC,cAAiB,UAAY5C,KAAKC,MAAM4C,uBAHjDC,kBAM2BA,EAAuBC,qBAAlDC,SACAC,EAAiBD,EAAmBE,MAAMzB,IAAI,SAAA0B,GAChD,OAAOA,EAAKC,MAAM7B,eAIlBmB,MAAM,wCACND,EAAa,GAAGlB,GAAK,UACrB,CAAEoB,QAAS,CAACC,cAAiB,UAAY5C,KAAKC,MAAM4C,wBAHlDQ,mBAK0BA,EAAsBN,sBAAhDO,SACAC,EAAgBD,EAAkBJ,MAAMzB,IAAI,SAAA0B,GAC9C,OAAOA,EAAKC,MAAM7B,eAMlBmB,MAAM,kDACNO,EAAeO,WACf,CAACb,QAAS,CAACC,cAAiB,UAAY5C,KAAKC,MAAM4C,wBAHjDY,mBAK4BA,EAA6BV,sBAAzDW,mBAGFhB,MAAM,kDACNa,EAAcC,WACd,CAACb,QAAS,CAACC,cAAiB,UAAY5C,KAAKC,MAAM4C,wBAHjDc,mBAK2BA,EAA4BZ,eAAvDa,SAIJC,IAAMC,KACJC,0CAA2B,CACzBhC,KAAM2B,EAAoBM,eAC1BhC,IAAK4B,EAAmBI,eACxB9D,KAAMF,KAAKC,MAAMC,OAElB+D,KAAK,SAAAC,MAMRlE,KAAKC,MAAMkE,8IAKX,OADAC,QAAQC,IAAI,UAAYrE,KAAKC,OAE3BJ,EAAAC,EAAAC,cAAA,4BAEIF,EAAAC,EAAAC,cAACuE,EAAD,CACE/C,GAAI,EACJC,UAAWxB,KAAKC,MAAMuB,UACtBL,YAAanB,KAAKiC,kBALxB,gBAcIpC,EAAAC,EAAAC,cAACuE,EAAD,CACE/C,GAAI,EACJC,UAAWxB,KAAKC,MAAMuB,UACtBL,YAAanB,KAAKoC,iBAErBpC,KAAKe,MAAMgB,MAAQ/B,KAAKe,MAAMiB,IAE7BnC,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAQC,QAAQ,UAAUpE,UAAU,6BAClCC,QAASL,KAAKqC,yBADhB,WAKAxC,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CAAQC,QAAQ,UAAUpE,UAAU,8BAApC,6CApHsBG,aC0BjBkE,cA7Bb,SAAAA,EAAYxE,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAyE,IACjBhE,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAA+D,GAAA3D,KAAAd,KAAMC,KACDc,MAAQ,CACX2D,OAAS,IAHMjE,wEAQjB,OACEZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACEC,QAAQ,UACRG,QAAQ,6BACRtE,QAASL,KAAKC,MAAM2E,YAHtB,eAOA/E,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACEC,QAAQ,UACRG,QAAQ,4BACRtE,QAASL,KAAKC,MAAM4E,cAHtB,wBAnBkBtE,iDCkDXuE,cA/Cb,SAAAA,EAAY7E,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAA8E,IACjBrE,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAoE,GAAAhE,KAAAd,KAAMC,KACDc,MAAQ,CACXgE,MAAO,IAETtE,EAAKuE,aAAevE,EAAKuE,aAAa9C,KAAlBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACpBA,EAAKwE,kBAAoBxE,EAAKwE,kBAAkB/C,KAAvBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KANRA,4EASNyE,GACXlF,KAAKkB,SACH,CAAE6D,MAAOG,EAAEC,OAAOJ,oDAKpB/E,KAAKC,MAAMmF,SAASpF,KAAKe,MAAMgE,OAC/B/E,KAAKkB,SAAS,CAAC6D,MAAO,sCAIvB,OACElF,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CACEC,UAAU,iBAEVzF,EAAAC,EAAAC,cAACwF,EAAA,EAAD,2BACA1F,EAAAC,EAAAC,cAACyF,EAAA,EAAD,CACEC,KAAK,OACLV,MAAO/E,KAAKe,MAAMgE,MAClBW,YAAY,sBACZC,SAAU3F,KAAKgF,eAEjBnF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACCC,QAAQ,UACRpE,UAAU,6BACVC,QAASL,KAAKiF,mBAHf,UAMApF,EAAAC,EAAAC,cAACyF,EAAA,EAAYI,SAAb,MACA/F,EAAAC,EAAAC,cAAC8F,EAAA,EAAD,+DA1CUtF,sBCuCJuF,mLAjCJ,IAAArF,EAAAT,KAEP,OADAoE,QAAQC,IAAI,iBAAkBrE,KAAKC,OAEjCJ,EAAAC,EAAAC,cAACgG,EAAA,EAAD,KACElG,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,iBACAF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,aAGJF,EAAAC,EAAAC,cAAA,aACCC,KAAKC,MAAM+F,MAAMvE,IAAI,SAAAwE,GAAI,OACtBpG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKkG,EAAKrE,KACV/B,EAAAC,EAAAC,cAAA,UAAKkG,EAAKhF,KAAOgF,EAAKhF,KAAO,aAC7BpB,EAAAC,EAAAC,cAAA,UAAKkG,EAAKC,OAASD,EAAKC,OAAS,UACjCrG,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACEC,QAAQ,UACRpE,UAAU,4BACVC,QAAS,kBAAMI,EAAKR,MAAMkG,iBAAiBF,EAAKrE,OAHlD,kBAzBUrB,aCmHXuF,cA5Gb,SAAAA,EAAY7F,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAA8F,IACjBrF,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAoF,GAAAhF,KAAAd,KAAMC,KACDc,MAAQ,CACXiF,MAAO,IAETvF,EAAK2F,cAAgB3F,EAAK2F,cAAclE,KAAnBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACrBA,EAAK4F,WAAa5F,EAAK4F,WAAWnE,KAAhBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAClBA,EAAK6F,UAAY7F,EAAK6F,UAAUpE,KAAfxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAPAA,6EAUL8F,GACZ,IAAIP,EAAQhG,KAAKe,MAAMiF,MACvBA,EAAMQ,KAAK,CAAC5E,IAAK2E,IACjBvG,KAAKkB,SAAU,CACb8E,MAAOA,uCAIAS,GACT,IAAIT,EAAQhG,KAAKe,MAAMiF,MAAMxD,OAAO,SAAAkE,GAAC,OAAIA,EAAE9E,MAAQ6E,IACnDzG,KAAKkB,SAAU,CACb8E,MAAOA,gLAKLW,EAAM3G,KAAKe,MAAMiF,MAAMvE,IAAI,SAAAwE,GAC7B,OAAOA,EAAKrE,IAAIgF,UAAU,MAG5BxC,QAAQC,IAAIsC,YAGVjE,MAAM,kDACNiE,EAAInD,WACJ,CAACb,QAAS,CAACC,cAAiB,UAAY5C,KAAKC,MAAM4C,uBAHjDgE,kBAKsBA,EAAuB9D,qBAA7C+D,mBAGFpE,MAAM,0CACNiE,EAAInD,WACJ,CAACb,QAAS,CAACC,cAAiB,UAAY5C,KAAKC,MAAM4C,wBAHjDkE,mBAKmBA,EAAehE,eAAlCiE,SACAC,EAAQD,EAAWE,OAAOzF,IAAI,SAAA2B,GAChC,OAAOA,EAAMnC,OAEfmD,QAAQC,IAAI,SAAU4C,GAElBE,GAAW,EACftD,IAAMC,KACJC,4CAA8B/D,KAAKC,MAAMC,KAAM,CAC7CkH,KAAMN,EAAc9C,iBAErBC,KAAM,SAACC,GACN,IAAI8B,EAAQ9B,EAAImD,KAAKC,QAAQ7F,IAAI,SAAAyE,GAE/B,OADAiB,IACO,CACHvF,IAAKR,EAAKL,MAAMiF,MAAMmB,GAASvF,IAC/BX,KAAMgG,EAAME,GACZjB,OAAQA,KAOd9B,QAAQC,IAAI2B,GACZ5E,EAAKF,SAAS,CAAC8E,MAAOA,MAK1B5B,QAAQC,IAAI,uJAGL,IAAAkD,EAAAvH,KAEP,OADAoE,QAAQC,IAAIrE,KAAKe,OAEflB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACCC,QAAQ,UACRpE,UAAU,4BACVC,QAASL,KAAKC,MAAMuH,aAHrB,QAMA3H,EAAAC,EAAAC,cAAC0H,EAAD,CACErC,SAAU,SAACmB,GAAD,OAASgB,EAAKnB,cAAcG,MAEvCvG,KAAKe,MAAMiF,MAAM,IAChBnG,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC2H,EAAD,CAAS1B,MAAOhG,KAAKe,MAAMiF,MAC3BG,iBAAkB,SAACI,GAAD,OAASgB,EAAKlB,WAAWE,MAC3C1G,EAAAC,EAAAC,cAACwE,EAAA,EAAD,CACEC,QAAQ,UACRG,QAAQ,6BACRtE,QAASL,KAAKsG,WAHhB,kBAhGc/F,8BCgJXoH,cA3Ib,SAAAA,EAAY1H,GAAO,IAAAQ,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAA2H,IACjBlH,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAiH,GAAA7G,KAAAd,KAAMC,KACDc,MAAQ,CACXb,KAAM,GACNsB,UAAW,GACX2C,SAAS,EACTyD,SAAS,EACT/E,MAAO,IAETpC,EAAKoH,eAAiBpH,EAAKoH,eAAe3F,KAApBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACtBA,EAAKqH,WAAarH,EAAKqH,WAAW5F,KAAhBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAClBA,EAAKsH,YAActH,EAAKsH,YAAY7F,KAAjBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACnBA,EAAKuH,aAAevH,EAAKuH,aAAa9F,KAAlBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KACpBA,EAAK+G,YAAc/G,EAAK+G,YAAYtF,KAAjBxB,OAAAyB,EAAA,EAAAzB,QAAAyB,EAAA,EAAAzB,CAAAD,KAbFA,gFAkBjBwH,OAAOC,SAAUC,6EAKjBnI,KAAKkB,SACH,CACEiD,SAAS,0CAMbN,IAAMuE,IACJrE,4CAA8B/D,KAAKe,MAAMb,KAAKqB,IAC7C0C,KAAK,SAAAC,MAIRlE,KAAKkB,SACH,CACEiD,SAAS,2CAMbnE,KAAKkB,SACH,CACE0G,SAAS,0CAKb5H,KAAKkB,SACH,CACE0G,SAAS,oLAMTS,EAASC,IAAYC,MAAMN,OAAOC,SAASM,QAC3CC,EAAcJ,EAAOK,aAEzB1I,KAAKkB,SAAU,CACb2B,MAAO4F,IAIT/F,MAAM,gCAAiC,CACrCC,QAAS,CAACC,cAAiB,UAAY6F,KACtCxE,KAAK,SAAA0E,GAAQ,OAAIA,EAAS5F,SAAQkB,KAAK,SAAAoD,GACtCjG,EAAKF,SAAU,CACbhB,KAAMmH,IAGRxD,IAAMuE,IACJ,4CAA8Cf,EAAK9F,IAClD0C,KAAK,SAAAC,GACJA,EAAImD,KAAKnB,QAAU9E,EAAK0G,0BAQ9BpF,MAAM,0CAA2C,CAC/CC,QAAS,CAACC,cAAiB,UAAY6F,mBAFvCG,kBAK0BA,EAAsB7F,cAAhD8F,SAEAC,EAAiBD,EAAkB3F,MACvClD,KAAKkB,SAAS,CAACM,UAAWsH,wIAI1B,OACEjJ,EAAAC,EAAAC,cAAA,OAAKK,UAAU,OACbP,EAAAC,EAAAC,cAAA,UAAQK,UAAU,cACbJ,KAAKe,MAAMS,UAGVxB,KAAKe,MAAMoD,QAWXtE,EAAAC,EAAAC,cAAA,WACGC,KAAKe,MAAM6G,QACZ/H,EAAAC,EAAAC,cAACgJ,EAAD,CACEvB,YAAaxH,KAAKwH,YAClB3E,MAAO7C,KAAKe,MAAM8B,MAClB3C,KAAMF,KAAKe,MAAMb,KAAKqB,KAIxB1B,EAAAC,EAAAC,cAAA,kBACOC,KAAKe,MAAMb,KAAKqB,GADvB,2BAEE1B,EAAAC,EAAAC,cAACiJ,EAAD,CACEnE,aAAc7E,KAAK+H,YACnBnD,WAAY5E,KAAKgI,iBAvBvBnI,EAAAC,EAAAC,cAAA,iBACMC,KAAKe,MAAMb,KAAKC,aADtB,0BAEEN,EAAAC,EAAAC,cAACkJ,EAAD,CACEzH,UAAWxB,KAAKe,MAAMS,UACtB2C,QAASnE,KAAK8H,WACdjF,MAAO7C,KAAKe,MAAM8B,MAClB3C,KAAMF,KAAKe,MAAMb,KAAKqB,MAT5B1B,EAAAC,EAAAC,cAACmJ,EAAD,CAAO5I,YAAaN,KAAK6H,eAAgB3H,KAAMF,KAAKe,MAAMb,gBAvGpDK,aCAE4I,QACW,cAA7BlB,OAAOC,SAASkB,UAEe,UAA7BnB,OAAOC,SAASkB,UAEhBnB,OAAOC,SAASkB,SAASC,MACvB,kECXNC,IAASC,OAAO1J,EAAAC,EAAAC,cAACyJ,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5F,KAAK,SAAA6F,GACjCA,EAAaC","file":"static/js/main.a67c171d.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nclass Login extends Component {\n\n  // constructor(props) {\n  //   super(props)\n  // }\n\n  //make axios calls here, then pass state up to App.js\n\n  render() {\n    return(\n      <div>\n        {this.props.user.display_name ?\n          <div>{this.props.user.display_name} is logged in.</div> :\n          <div>Please Sign in!</div>\n        }\n        <button\n          className='btn btn-success btn-sm m-2'\n          onClick={this.props.handleLogin}\n          >\n          Sign In with Spotify\n        </button>\n      </div>\n    )\n  }\n}\n\nexport default Login;\n","import React, {Component} from 'react';\nimport {DropdownButton, MenuItem} from 'react-bootstrap';\n\nclass DropdownMenu extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      status: \"Select a Playlist\"\n    }\n  }\n\n  chosePlaylist(name) {\n    this.setState({status: name})\n    this.props.handleClick(name)\n  }\n\n  render() {\n    return(\n      <div>\n        <div className=\"dropdown\">\n          <DropdownButton title={this.state.status}\n            id=\"dropdown-size-small\"\n            className='btn btn-primary btn-sm m-2'>\n            {this.props.playlists.map(playlist =>\n              <MenuItem\n                key={playlist.id}\n                onClick={() => this.chosePlaylist(playlist.name)}>\n                {playlist.name}\n              </MenuItem>\n            )}\n          </DropdownButton>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DropdownMenu;\n","import React, {Component} from 'react';\nimport DropdownMenu from './DropdownMenu.jsx';\nimport {Button} from 'react-bootstrap';\nimport axios from 'axios';\n\n// let BACKEND_SERVER = process.env.GMC_BACKEND_SERVER\nlet BACKEND_SERVER = 'https://gmc-backend.herokuapp.com'\n\nclass TrainingSelection extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      good: '',\n      // okay: false,\n      bad: ''\n    };\n    this.handleClickGood = this.handleClickGood.bind(this);\n    // this.handleClickOkay = this.handleClickOkay.bind(this);\n    this.handleClickBad = this.handleClickBad.bind(this);\n    this.submitTrainingSelection = this.submitTrainingSelection.bind(this);\n  }\n\n\n//Bad way to handle this.\n  handleClickGood(playlist_name) {\n    this.setState( {good: playlist_name})\n  }\n  // handleClickOkay(playlist_name) {\n  //   this.setState( {okay: playlist_name})\n  // }\n  handleClickBad(playlist_name) {\n    this.setState( {bad: playlist_name})\n  }\n\n\n  async submitTrainingSelection() {\n    //get just the playlist with the good/bad name\n    let good_playlist = this.props.playlists.filter(playlist => playlist.name === this.state.good)\n    let bad_playlist = this.props.playlists.filter(playlist => playlist.name === this.state.bad)\n\n    //call spoot api but wait for a response\n    let good_playlist_response = await\n      fetch('https://api.spotify.com/v1/playlists/' +\n      good_playlist[0].id + '/tracks',\n      {headers: {'Authorization': 'Bearer ' + this.props.token}\n    });\n    //jsonfy the playlist tracks and then get just the ids and store them into an array.\n    let good_playlist_json = await good_playlist_response.json();\n    let good_track_ids = good_playlist_json.items.map(item => {\n      return item.track.id;\n    })\n\n    let bad_playlist_response = await\n      fetch('https://api.spotify.com/v1/playlists/' +\n      bad_playlist[0].id + '/tracks',\n      { headers: {'Authorization': 'Bearer ' + this.props.token}\n    })\n    let bad_playlist_json = await bad_playlist_response.json();\n    let bad_track_ids = bad_playlist_json.items.map(item => {\n      return item.track.id;\n    })\n\n    // console.log(good_track_ids.toString())\n\n    let good_audio_features_response = await\n      fetch('https://api.spotify.com/v1/audio-features/?ids=' +\n      good_track_ids.toString(),\n      {headers: {'Authorization': 'Bearer ' + this.props.token}}\n    )\n    let good_audio_features = await good_audio_features_response.json();\n\n    let bad_audio_features_response = await\n      fetch('https://api.spotify.com/v1/audio-features/?ids=' +\n      bad_track_ids.toString(),\n      {headers: {'Authorization': 'Bearer ' + this.props.token}}\n    )\n    let bad_audio_features = await bad_audio_features_response.json();\n\n    // console.log(\"good_audio_features:\",good_audio_features)\n\n    axios.post(\n      BACKEND_SERVER + '/train', {\n        good: good_audio_features.audio_features,\n        bad: bad_audio_features.audio_features,\n        user: this.props.user\n      })\n      .then(res => {\n        // console.log(res.data)\n      });\n\n    //FIXME: Only set trained to true if it was successfuly trained.\n    // console.log('submit training selection!!');\n    this.props.trained();\n  }\n\n  render() {\n    console.log(\"props: \" , this.props)\n    return(\n      <div>\n        Good Playlist:\n          <DropdownMenu\n            id={1}\n            playlists={this.props.playlists}\n            handleClick={this.handleClickGood}\n          />\n        {/* Okay Playlist:\n          <DropdownMenu\n            id={2}\n            playlists={this.props.playlists}\n            handleClick={this.handleClickOkay}\n          /> */}\n        Bad Playlist:\n          <DropdownMenu\n            id={3}\n            playlists={this.props.playlists}\n            handleClick={this.handleClickBad}\n          />\n        {this.state.good && this.state.bad ?\n        // {this.state.good && this.state.okay && this.state.bad ?\n          <Button bsStyle=\"primary\" className='btn btn-success btn-sm m-2'\n            onClick={this.submitTrainingSelection}\n          >\n            Submit!\n          </Button> :\n          <Button bsStyle=\"default\" className='btn btn-default btn-sm m-2'>\n            Please select a playlist for each\n          </Button>\n        }\n      </div>\n    )\n  }\n}\n\nexport default TrainingSelection;\n","import React, {Component} from 'react';\nimport {Button} from 'react-bootstrap';\n\nclass TrainedPage extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      models : []\n    };\n  }\n\n  render() {\n    return(\n      <div>\n        <Button\n          bsStyle=\"default\"\n          bsClass='btn btn-primary btn-sm m-2'\n          onClick={this.props.nowTesting}\n          >\n            Test A Song\n          </Button>\n        <Button\n          bsStyle=\"default\"\n          bsClass='btn btn-danger btn-sm m-2'\n          onClick={this.props.handleDelete}>\n            Delete Model\n        </Button>\n\n      </div>\n    )\n  }\n}\n\nexport default TrainedPage;\n","import React, {Component} from 'react';\nimport {FormGroup, ControlLabel, HelpBlock, FormControl} from 'react-bootstrap';\nimport {Button} from 'react-bootstrap';\n\nclass Form extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      value: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n    this.handleButtonClick = this.handleButtonClick.bind(this);\n  }\n\n  handleChange(e) {\n    this.setState(\n      { value: e.target.value\n      });\n  }\n\n  handleButtonClick() {\n    this.props.addSongs(this.state.value)\n    this.setState({value: ''})\n  }\n\n  render() {\n   return (\n     <form>\n       <FormGroup\n         controlId=\"formBasicText\"\n       >\n         <ControlLabel>Testing New Songs!</ControlLabel>\n         <FormControl\n           type=\"text\"\n           value={this.state.value}\n           placeholder=\"Enter a Spotify URI\"\n           onChange={this.handleChange}\n         />\n         <Button\n          bsStyle=\"default\"\n          className='btn btn-success btn-sm m-2'\n          onClick={this.handleButtonClick}>\n           Submit\n         </Button>\n         <FormControl.Feedback />\n         <HelpBlock>Example: spotify:track:5HeKOKc4phmLn8e4I7EkzD</HelpBlock>\n       </FormGroup>\n     </form>\n   );\n }\n}\n\nexport default Form;\n","import React, {Component} from 'react';\nimport {Table} from 'react-bootstrap';\nimport {Button} from 'react-bootstrap';\n\nclass TestingPage extends Component {\n\n  // constructor(props) {\n  //   super(props)\n  // }\n\n  render() {\n    console.log('Results props:' ,this.props)\n    return(\n      <Table>\n        <thead>\n          <tr>\n            <th>URI</th>\n            <th>Song Name</th>\n            <th>Result</th>\n            <th></th>\n          </tr>\n        </thead>\n        <tbody>\n        {this.props.songs.map(song =>\n            <tr>\n              <td>{song.key}</td>\n              <td>{song.name ? song.name : \"Song Name\"}</td>\n              <td>{song.result ? song.result : \"Result\"}</td>\n              <td>\n                <Button\n                  bsStyle=\"default\"\n                  className='btn btn-danger btn-sm m-2'\n                  onClick={() => this.props.handleDeleteSong(song.key)}>\n                    X\n                </Button>\n              </td>\n            </tr>\n        )}\n      </tbody>\n      </Table>\n  )}\n}\n\nexport default TestingPage;\n","import React, {Component} from 'react';\nimport {Button} from 'react-bootstrap';\nimport Form from './Form.jsx';\nimport Results from './Results.jsx';\nimport axios from 'axios';\n\n// let BACKEND_SERVER = process.env.GMC_BACKEND_SERVER\nlet BACKEND_SERVER = 'https://gmc-backend.herokuapp.com'\n\nclass TestingPage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      songs: []\n    };\n    this.addSongToList = this.addSongToList.bind(this);\n    this.removeSong = this.removeSong.bind(this);\n    this.testSongs = this.testSongs.bind(this);\n  }\n\n  addSongToList(uri) {\n    var songs = this.state.songs\n    songs.push({key: uri})\n    this.setState( {\n      songs: songs\n    });\n  }\n\n  removeSong(song_key) {\n    var songs = this.state.songs.filter(c => c.key !== song_key);\n    this.setState( {\n      songs: songs\n    })\n  }\n\n  async testSongs() {\n    let ids = this.state.songs.map(song => {\n      return song.key.substring(14);\n    })\n\n    console.log(ids)\n\n    let test_features_response = await\n      fetch('https://api.spotify.com/v1/audio-features/?ids=' +\n      ids.toString(),\n      {headers: {'Authorization': 'Bearer ' + this.props.token}}\n      )\n    let test_features = await test_features_response.json();\n\n    let names_response = await\n      fetch('https://api.spotify.com/v1/tracks/?ids=' +\n      ids.toString(),\n      {headers: {'Authorization': 'Bearer ' + this.props.token}}\n      )\n    let names_json = await names_response.json();\n    let names = names_json.tracks.map(track => {\n      return track.name;\n    })\n    console.log(\"names:\", names)\n\n    var counter = -1\n    axios.post(\n      BACKEND_SERVER + 'predict/' + this.props.user, {\n        test: test_features.audio_features\n      })\n      .then( (res) => {\n        let songs = res.data.results.map(result => {\n          counter++;\n          return {\n              key: this.state.songs[counter].key,\n              name: names[counter],\n              result: result\n            }\n\n          // console.log(names[counter])\n          // console.log(\"<<<<<<<<<<<<<<<<\", res)\n\n        })\n        console.log(songs)\n        this.setState({songs: songs})\n\n      });\n\n    //axios call here\n    console.log(\"testing songs!!\");\n  }\n\n  render() {\n    console.log(this.state);\n    return(\n      <div>\n        <Button\n         bsStyle=\"default\"\n         className='btn btn-danger btn-sm m-2'\n         onClick={this.props.stopTesting}>\n          Back\n        </Button>\n        <Form\n          addSongs={(uri) => this.addSongToList(uri)}\n        />\n        {this.state.songs[0] &&\n          <div>\n            <Results songs={this.state.songs}\n            handleDeleteSong={(uri) => this.removeSong(uri)}/>\n            <Button\n              bsStyle=\"default\"\n              bsClass='btn btn-primary btn-sm m-2'\n              onClick={this.testSongs}\n              >\n              Test!\n            </Button>\n          </div>\n        }\n      </div>\n    )\n  }\n}\n\nexport default TestingPage;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Login from './components/login.jsx';\nimport TrainingSelection from './components/TrainingSelection.jsx';\nimport TrainedPage from './components/isTrainedPage.jsx';\nimport TestingPage from './components/TestingPage.jsx';\nimport axios from 'axios';\nimport queryString from 'query-string';\n\nlet OAUTH_SERVER = 'https://gmc-oauth.herokuapp.com'\nlet BACKEND_SERVER = 'https://gmc-backend.herokuapp.com'\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      user: {},\n      playlists: [],\n      trained: false,\n      testing: false,\n      token: ''\n    }\n    this.loginToSpotify = this.loginToSpotify.bind(this);\n    this.nowTrained = this.nowTrained.bind(this);\n    this.deleteModel = this.deleteModel.bind(this);\n    this.startTesting = this.startTesting.bind(this);\n    this.stopTesting = this.stopTesting.bind(this);\n  }\n\n  loginToSpotify() {\n    // window.location=\"http://localhost:8888/login\"\n    window.location= OAUTH_SERVER + \"/login\"\n  }\n\n  //FIXME: Only switch to trained if there exists one in the DB.\n  nowTrained() {\n    this.setState(\n      {\n        trained: true\n      }\n    )\n  }\n\n  deleteModel() {\n    axios.get(\n      BACKEND_SERVER + '/delete/' + this.state.user.id)\n      .then(res => {\n        // console.log(res.data)\n      });\n\n    this.setState(\n      {\n        trained: false\n      }\n    )\n  }\n\n  startTesting() {\n    this.setState(\n      {\n        testing: true\n      }\n    )\n  }\n  stopTesting() {\n    this.setState(\n      {\n        testing: false\n      }\n    )\n  }\n\n  async componentDidMount() {\n    let parsed = queryString.parse(window.location.search);\n    let accessToken = parsed.access_token;\n\n    this.setState( {\n      token: accessToken\n    })\n\n    //Once I get the user info, then check if they have any models.\n    fetch('https://api.spotify.com/v1/me', {\n      headers: {'Authorization': 'Bearer ' + accessToken}\n    }).then(response => response.json()).then(data => {\n        this.setState( {\n          user: data\n        });\n\n        axios.get(\n          'https://gmc-backend.herokuapp.com/models/' + data.id)\n          .then(res => {\n            res.data.result && this.nowTrained();\n            // console.log(\"res.data:\", res.data)\n          });\n      }\n    )\n\n    // Also grab the list of playlists that they have.\n    let getPlaylists_response = await\n      fetch('https://api.spotify.com/v1/me/playlists', {\n        headers: {'Authorization': 'Bearer ' + accessToken}\n      });\n\n    let getPlaylists_json = await getPlaylists_response.json();\n\n    var arrOfPlaylists = getPlaylists_json.items;\n    this.setState({playlists: arrOfPlaylists});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          { !this.state.playlists ?\n            <Login handleLogin={this.loginToSpotify} user={this.state.user}/>\n            :\n            (!this.state.trained ?\n              <div>\n                Hi {this.state.user.display_name}! Please train a model.\n                <TrainingSelection\n                  playlists={this.state.playlists}\n                  trained={this.nowTrained}\n                  token={this.state.token}\n                  user={this.state.user.id}\n                />\n              </div>\n              :\n              <div>\n                {this.state.testing ?\n                <TestingPage\n                  stopTesting={this.stopTesting}\n                  token={this.state.token}\n                  user={this.state.user.id}\n                />\n\n                :\n                <div>\n                  Hey {this.state.user.id}! Your model is trained!\n                  <TrainedPage\n                    handleDelete={this.deleteModel}\n                    nowTesting={this.startTesting}/>\n                </div>\n                }\n              </div>\n            )\n          }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}